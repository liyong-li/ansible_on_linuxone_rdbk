---
# tasks file for create-cluster
- name: remove openshift workdir
  file:
    path: "{{ workdir }}"
    state: "absent"

- name: create openshift workdir
  file:
    path: "{{ workdir }}"
    state: "directory"

- name: create ssh keypair
  shell: ssh-keygen -t rsa -b 2048 -N '' -C 'OCP-4-Admin' -f ~/.ssh/id_rsa <<< y
  args:
    creates: ~/.ssh/id_rsa

- name: slurp ssh pubkey
  tags: config
  slurp:
    src: ~/.ssh/id_rsa.pub
  register: bastion_pubkey

# install config is deleted when ignition
# configs are created.  this task also 
# creates a copy to check for debugging
- name: generate install-config.yaml
  tags: config
  template:
    dest: "{{ workdir }}/{{ item }}"
    src: install-config.yaml.j2
  with_items:
  - install-config.yaml
  - install-config.copy.yaml
- name: download and set permissions for openshift-install
  block:
  - name: download and unzip openshift-install
    unarchive:
      src: "{{ openshift_install_binary_url}}/{{ openshift_install_cli }}"
      dest: "/usr/local/bin/"
      creates: "/usr/local/bin/openshift-install"
      remote_src: yes
    when: offline_mode is not defined
    #retries: 3
    #delay: 5
    #register: result
    #until: result.rc == 0
  #- debug: 
      #var: result
  - name: download and unzip openshift-client
    unarchive:
      src: "{{ openshift_install_binary_url}}/{{ openshift_client_cli }}"
      dest: "/usr/local/bin/"
      creates: "/usr/local/bin/oc"
      remote_src: yes
    when: offline_mode is not defined
    #retries: 3
    #delay: 5
    #register: result
    #until: result.rc == 0
  #- debug: 
      #var: result
  - name: download and unzip openshift-install (offline)
    unarchive:
      src: "{{ openshift_install_binary_url_offline }}/{{ openshift_install_cli }}"
      dest: "/usr/local/bin/"
      creates: "/usr/local/bin/openshift-install"
    when: offline_mode is defined

  - name: download and unzip openshift-client (offline)
    unarchive:
      src: "{{ openshift_install_binary_url_offline }}/{{ openshift_client_cli }}"
      dest: "/usr/local/bin/"
      creates: "/usr/local/bin/oc"
    when: offline_mode is defined

  - name: set permissions for ocp installer
    file:
      path: "/usr/local/bin/openshift-install"
      mode: 0755



- name: create manifests 
  tags: manifests
  shell: "/usr/local/bin/openshift-install --dir=`pwd` create manifests"
  args:
    chdir: "{{ workdir }}"
  when: not controller_schedulable 

- name: make controller node unschedulable
  shell: "sed -i 's/true/false/g' {{ workdir }}/manifests/cluster-scheduler-02-config.yml"
  when: not controller_schedulable     

- name: create ignition configs
  tags: config
  shell: "/usr/local/bin/openshift-install --dir=`pwd` create ignition-configs"
  args:
    chdir: "{{ workdir }}"
    creates: "{{ workdir }}/metadata.json"

- block:
  - name: remove ignition config directory
    file:
      path: /var/www/html/ignition
      state: absent
  - name: make ignition config directory
    file:
      path: /var/www/html/ignition
      state: directory
  - name: get ign files
    tags: config
    shell: ls {{ workdir }}/*.ign
    register: ign_raw
  - name: copy ignition configs to /var/www/html/ignition
    tags: config
    copy:
      src: "{{ item }}"
      dest: "/var/www/html/ignition/"
      remote_src: yes
      force: yes
    with_items: "{{ ign_raw.stdout_lines }}"

- name: mkdir ~/.kube
  file:
    path: ~/.kube
    state: directory

- name: install kubeconfig
  tags: wait-install
  copy:
    src: "{{ workdir }}/auth/kubeconfig"
    dest: "~/.kube/config"
    remote_src: yes
    force: yes

- name: create /etc/hosts entry
  tags: etc-hosts
  copy:
    dest: "{{ workdir }}/etc.hosts"
    content: >
      {{ bastion_public_ip_address }}
      bastion.{{ cluster_domain_name }}
      api.{{ cluster_domain_name }}
      console-openshift-console.apps.{{ cluster_domain_name }}
      oauth-openshift.apps.{{ cluster_domain_name }}
